# See above for the definitions of ui and server
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
library(shiny)
# See above for the definitions of ui and server
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
shinyApp(ui = ui, server = server)
library(shiny); runApp('MidTermApp.r')
runApp('MidTermApp.r')
runApp('MidTermApp.r')
runApp('MidTermApp.r')
runApp('MidTermApp.r')
runApp('MidTermApp.r')
runApp('MidTermApp.r')
library(leaflet)    # The map-making package
library(geojsonio)  # A package for geographic and spatial data, requires the latest version of dplyr
library(dplyr)      # Used for data manipulation and merging
library(htmltools)
library(tidyr)
library(ggplot2)
library(readr)
library(plotly)   # for interactive visuals
library(stringr)  # to process character strings
library(forcats)
#Read all the data
shapeurl <- "https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json"
WorldCountry <- geojson_read(shapeurl, what = "sp")
co2<-read.csv("CO2.csv")
happiness<-read.csv("2015.csv")
education<-read.csv("educationExpen.csv")
gdp<-read.csv("GDP.csv")
homicides<-read.csv("homicides.csv")
lifeFemale<-read.csv("LifeExpenFemale.csv")
lifeMale<-read.csv("LifeExpectMale.csv")
head(lifeMale)
rd<-read.csv("R&D.csv")
#Clean education data
education[,3:59]<-list(NULL)
education[,4:6]<-list(NULL)
colnames(education)[3]<-parse_number(colnames(education)[3])
colnames(education)[3]<-"Education"
#Clean co2 data
co2[,3:58]<-list(NULL)
co2[,4:7]<-list(NULL)
colnames(co2)[3]<-parse_number(colnames(co2)[3])
colnames(co2)[3]<-"CO2"
#Clean gdp data
gdp[,3:59]<-list(NULL)
gdp[,4:6]<-list(NULL)
colnames(gdp)[3]<-parse_number(colnames(gdp)[3])
colnames(gdp)[3]<-"GDP"
#Clean homicides data
homicides[,3:59]<-list(NULL)
homicides[,4:6]<-list(NULL)
colnames(homicides)[3]<-parse_number(colnames(homicides)[3])
colnames(homicides)[3]<-"Homicides"
#Clean lifeFemale data
lifeFemale[,3:59]<-list(NULL)
lifeFemale[,4:6]<-list(NULL)
colnames(lifeFemale)[3]<-parse_number(colnames(lifeFemale)[3])
#Clean lifeMale data
lifeMale[,3:59]<-list(NULL)
lifeMale[,4:6]<-list(NULL)
colnames(lifeMale)[3]<-parse_number(colnames(lifeMale)[3])
#Clean r&d data
rd[,3:59]<-list(NULL)
rd[,4:6]<-list(NULL)
colnames(rd)[3]<-parse_number(colnames(rd)[3])
colnames(rd)[3]<-"RD"
#combin data for female and male life expectance
life<-full_join(x = lifeFemale, y = lifeMale, by = "Country.Code")
life[,1]<-list(NULL)
colnames(life)[2]<-"Female"
colnames(life)[3]<-"Country"
colnames(life)[4]<-"Male"
life<-filter(life, Female != "NA" | Male != "NA")
life$average = (life$Female+life$Male)/2
#Combine the rest of the data frame with the happiness data frame
overall<- full_join(x=life, y=rd, by="Country.Code")
colnames(overall)[3]="Country"
overall[,6]<-list(NULL)
overall<- full_join(x=overall, y=homicides, by="Country.Code")
colnames(overall)[3]="Country"
overall[,7]<-list(NULL)
overall<-full_join(x=overall, y=gdp, by="Country.Code")
overall[,8]<-list(NULL)
overall<-full_join(x=overall, y=education, by="Country.Code")
overall[,9]<-list(NULL)
overall<-full_join(x=overall, y=co2, by="Country.Code")
overall[,10]<-list(NULL)
colnames(overall)[3]<-"Country"
overall<-left_join(x = happiness, y = overall, by = "Country")
overall[,5:8]<-list(NULL)
overall[,7:8]<-list(NULL)
CountryData <- left_join(x=data.frame(Id = WorldCountry$id), y=overall, by = c("Id" ="Country.Code"))
save(CountryData, file = "CountryData.RData")
runApp('MidTermApp.r')
runApp('MidTermApp.r')
rownames(CountryData)
colnames(CountryData)
colnames(CountryData)[6:7]
colnames(CountryData)[10:]
colnames(CountryData)[10:15]
runApp('MidTermApp.r')
runApp('MidTermApp.r')
runApp('MidTermApp.r')
runApp('MidTermApp.r')
runApp('MidTermApp.r')
CountryData$Freedom
runApp('MidTermApp.r')
runApp('MidTermApp.r')
runApp('MidTermApp.r')
runApp('MidTermApp.r')
x<-Freedom
x<-"freedom"
get(x)
runApp('MidTermApp.r')
CountryData$Freedom
runApp('MidTermApp.r')
plot_ly(CountryData %>% filter(!is.na(CountryData$Freedom)), x = CountryData$Freedom, color = I("blue")) %>%
add_markers(y = ~Happiness.Score, text = ~Country, showlegend = FALSE) %>%
add_lines(y = ~fitted(lm(Happiness.Score, CountryData$Freedom)),
line = list(color = '#07A4B5'),
name = "Lm Smoother", showlegend = TRUE) %>%
layout(xaxis = list(title = 'Freedom'),
yaxis = list(title = 'Happiness Score'),
legend = list(x = 10, y = 1))
CountryData %>% filter(!is.na(CountryData$Freedom)
)
plot_ly(CountryData %>% filter(!is.na(CountryData$Freedom))), x = CountryData$Freedom, color = I("blue")) %>%
add_markers(y = ~Happiness.Score, text = ~Country, showlegend = FALSE) %>%
add_lines(y = ~fitted(lm(Happiness.Score, CountryData$Freedom)),
line = list(color = '#07A4B5'),
name = "Lm Smoother", showlegend = TRUE) %>%
layout(xaxis = list(title = 'Freedom'),
yaxis = list(title = 'Happiness Score'),
legend = list(x = 10, y = 1))
CountryData %>% filter(!is.na(CountryData$Freedom))
plot_ly(CountryData %>% filter(!is.na(CountryData$Freedom)), x = CountryData$Freedom, color = I("blue")) %>%
add_markers(y = ~Happiness.Score, text = ~Country, showlegend = FALSE) %>%
add_lines(y = ~fitted(lm(Happiness.Score, CountryData$Freedom)),
line = list(color = '#07A4B5'),
name = "Lm Smoother", showlegend = TRUE) %>%
layout(xaxis = list(title = 'Freedom'),
yaxis = list(title = 'Happiness Score'),
legend = list(x = 10, y = 1))
cc<-CountryData %>% filter(!is.na(CountryData$Freedom))
plot_ly(cc, x = CountryData$Freedom, color = I("blue")) %>%
add_markers(y = ~Happiness.Score, text = ~Country, showlegend = FALSE) %>%
add_lines(y = ~fitted(lm(Happiness.Score, CountryData$Freedom)),
line = list(color = '#07A4B5'),
name = "Lm Smoother", showlegend = TRUE) %>%
layout(xaxis = list(title = 'Freedom'),
yaxis = list(title = 'Happiness Score'),
legend = list(x = 10, y = 1))
plot_ly(cc, x = cc$Freedom, color = I("blue")) %>%
add_markers(y = ~Happiness.Score, text = ~Country, showlegend = FALSE) %>%
add_lines(y = ~fitted(lm(Happiness.Score, cc$Freedom)),
line = list(color = '#07A4B5'),
name = "Lm Smoother", showlegend = TRUE) %>%
layout(xaxis = list(title = 'Freedom'),
yaxis = list(title = 'Happiness Score'),
legend = list(x = 10, y = 1))
plot_ly(cc, x = cc$Freedom, color = I("blue")) %>%
add_markers(y = ~Happiness.Score, text = ~Country, showlegend = FALSE) %>%
add_lines(y = ~fitted(lm(Happiness.Score ~ Freedom)),
line = list(color = '#07A4B5'),
name = "Lm Smoother", showlegend = TRUE) %>%
layout(xaxis = list(title = 'Freedom'),
yaxis = list(title = 'Happiness Score'),
legend = list(x = 10, y = 1))
plot_ly(cc, x = cc$Freedom, color = I("blue")) %>%
add_markers(y = ~Happiness.Score, text = ~Country, showlegend = FALSE) %>%
add_lines(y = ~fitted(lm(Happiness.Score cc$Freedom)),
line = list(color = '#07A4B5'),
name = "Lm Smoother", showlegend = TRUE) %>%
layout(xaxis = list(title = 'Freedom'),
yaxis = list(title = 'Happiness Score'),
legend = list(x = 10, y = 1))
plot_ly(CountryData %>% filter(!is.na(CO2)), x = ~CO2, color = I("blue")) %>%
add_markers(y = ~Happiness.Score, text = ~Country, showlegend = FALSE) %>%
add_lines(y = ~fitted(lm(Happiness.Score CountryData$CO2)),
line = list(color = '#07A4B5'),
name = "Lm Smoother", showlegend = TRUE) %>%
layout(xaxis = list(title = 'CO2'),
yaxis = list(title = 'Happiness Score'),
legend = list(x = 10, y = 1))
plot_ly(CountryData %>% filter(!is.na(CO2)), x = ~CO2, color = I("blue")) %>%
add_markers(y = ~Happiness.Score, text = ~Country, showlegend = FALSE) %>%
add_lines(y = ~fitted(lm(Happiness.Score, CountryData$CO2)),
line = list(color = '#07A4B5'),
name = "Lm Smoother", showlegend = TRUE) %>%
layout(xaxis = list(title = 'CO2'),
yaxis = list(title = 'Happiness Score'),
legend = list(x = 10, y = 1))
plot_ly(CountryData %>% filter(!is.na(CO2)), x = ~CO2, color = I("blue")) %>%
add_markers(y = ~Happiness.Score, text = ~Country, showlegend = FALSE) %>%
add_lines(y = ~fitted(lm(y=CountryData$Happiness.Score, x=CountryData$CO2)),
line = list(color = '#07A4B5'),
name = "Lm Smoother", showlegend = TRUE) %>%
layout(xaxis = list(title = 'CO2'),
yaxis = list(title = 'Happiness Score'),
legend = list(x = 10, y = 1))
plot_ly(CountryData %>% filter(!is.na(CO2)), x = ~CO2, color = I("blue")) %>%
add_markers(y = ~Happiness.Score, text = ~Country, showlegend = FALSE) %>%
add_lines(y = ~fitted(lm()),
line = list(color = '#07A4B5'),
name = "Lm Smoother", showlegend = TRUE) %>%
layout(xaxis = list(title = 'CO2'),
yaxis = list(title = 'Happiness Score'),
legend = list(x = 10, y = 1))
runApp('MidTermApp.r')
runApp('MidTermApp.r')
runApp('MidTermApp.r')
runApp('MidTermApp.r')
plot_ly(CountryData %>% filter(!is.na(CO2)), x = ~CO2, color = I("blue")) %>%
add_markers(y = ~Happiness.Score, text = ~Country, showlegend = FALSE) %>%
add_lines(y = ~fitted(lm(Happiness.Score ~ CO2)),
line = list(color = '#07A4B5'),
name = "Lm Smoother", showlegend = TRUE) %>%
layout(xaxis = list(title = 'CO2'),
yaxis = list(title = 'Happiness Score'),
legend = list(x = 10, y = 1)
#Relationship between happyiness score and CO2
p8 <- plot_ly(CountryData %>% filter(!is.na(CountryData$CO2)), x = ~CO2, color = I("blue")) %>%
add_markers(y = ~Happiness.Score, text = ~Country, showlegend = FALSE) %>%
add_lines(y = ~fitted(lm(Happiness.Score ~ CO2)),
line = list(color = '#07A4B5'),
name = "Lm Smoother", showlegend = TRUE) %>%
layout(xaxis = list(title = 'CO2'),
yaxis = list(title = 'Happiness Score'),
legend = list(x = 10, y = 1))
plot_ly(CountryData %>% filter(!is.na(CO2)), x = ~CO2, color = I("blue")) %>%
add_markers(y = ~Happiness.Score, text = ~Country, showlegend = FALSE) %>%
add_lines(y = ~fitted(lm(Happiness.Score ~ CountryData$CO2)),
line = list(color = '#07A4B5'),
name = "Lm Smoother", showlegend = TRUE) %>%
layout(xaxis = list(title = 'CO2'),
yaxis = list(title = 'Happiness Score'),
legend = list(x = 10, y = 1))
library(WorldCountry)
runApp('MidTermApp.r')
runApp('MidTermApp.r')
runApp('MidTermApp.r')
runApp('MidTermApp.r')
runApp('MidTermApp.r')
runApp('MidTermApp.r')
install.packages("shiny")
library(shiny); runApp('MidTermApp.r')
install.packages("plotly")
runApp('MidTermApp.r')
install.packages("ggplot2")
install.packages("ggplot2")
library(shiny); runApp('MidTermApp.r')
runApp('MidTermApp.r')
#install.packages("leaflet")
load(file = "CountryData.RData")
install.packages("leaflet")
library(leaflet)
runApp('MidTermApp.r')
runApp('MidTermApp.r')
library(leaflet)    # The map-making package
library(leaflet)    # The map-making package
library(geojsonio)  # A package for geographic and spatial data, requires the latest version of dplyr
library(dplyr)      # Used for data manipulation and merging
library(htmltools)
library(tidyr)
library(ggplot2)
library(readr)
library(plotly)   # for interactive visuals
library(stringr)  # to process character strings
library(forcats)
#Read all the data
shapeurl <- "https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json"
WorldCountry <- geojson_read(shapeurl, what = "sp")
co2<-read.csv("CO2.csv")
happiness<-read.csv("2015.csv")
education<-read.csv("educationExpen.csv")
gdp<-read.csv("GDP.csv")
homicides<-read.csv("homicides.csv")
lifeFemale<-read.csv("LifeExpenFemale.csv")
lifeMale<-read.csv("LifeExpectMale.csv")
head(lifeMale)
rd<-read.csv("R&D.csv")
#Clean education data
education[,3:59]<-list(NULL)
education[,4:6]<-list(NULL)
colnames(education)[3]<-parse_number(colnames(education)[3])
colnames(education)[3]<-"Education"
#Clean co2 data
co2[,3:58]<-list(NULL)
co2[,4:7]<-list(NULL)
colnames(co2)[3]<-parse_number(colnames(co2)[3])
colnames(co2)[3]<-"CO2"
#Clean gdp data
gdp[,3:59]<-list(NULL)
gdp[,4:6]<-list(NULL)
colnames(gdp)[3]<-parse_number(colnames(gdp)[3])
colnames(gdp)[3]<-"GDP"
#Clean homicides data
homicides[,3:59]<-list(NULL)
homicides[,4:6]<-list(NULL)
colnames(homicides)[3]<-parse_number(colnames(homicides)[3])
colnames(homicides)[3]<-"Homicides"
#Clean lifeFemale data
lifeFemale[,3:59]<-list(NULL)
lifeFemale[,4:6]<-list(NULL)
colnames(lifeFemale)[3]<-parse_number(colnames(lifeFemale)[3])
#Clean lifeMale data
lifeMale[,3:59]<-list(NULL)
lifeMale[,4:6]<-list(NULL)
colnames(lifeMale)[3]<-parse_number(colnames(lifeMale)[3])
#Clean r&d data
rd[,3:59]<-list(NULL)
rd[,4:6]<-list(NULL)
colnames(rd)[3]<-parse_number(colnames(rd)[3])
colnames(rd)[3]<-"RD"
#combin data for female and male life expectance
life<-full_join(x = lifeFemale, y = lifeMale, by = "Country.Code")
life[,1]<-list(NULL)
colnames(life)[2]<-"Female"
colnames(life)[3]<-"Country"
colnames(life)[4]<-"Male"
life<-filter(life, Female != "NA" | Male != "NA")
life$average = (life$Female+life$Male)/2
#Combine the rest of the data frame with the happiness data frame
overall<- full_join(x=life, y=rd, by="Country.Code")
colnames(overall)[3]="Country"
overall[,6]<-list(NULL)
overall<- full_join(x=overall, y=homicides, by="Country.Code")
colnames(overall)[3]="Country"
overall[,7]<-list(NULL)
overall<-full_join(x=overall, y=gdp, by="Country.Code")
overall[,8]<-list(NULL)
overall<-full_join(x=overall, y=education, by="Country.Code")
overall[,9]<-list(NULL)
overall<-full_join(x=overall, y=co2, by="Country.Code")
overall[,10]<-list(NULL)
colnames(overall)[3]<-"Country"
overall<-left_join(x = happiness, y = overall, by = "Country")
overall[,5:8]<-list(NULL)
overall[,7:8]<-list(NULL)
CountryData <- left_join(x=data.frame(Id = WorldCountry$id), y=overall, by = c("Id" ="Country.Code"))
save(CountryData, file = "CountryData.RData")
install.packages("geojsonio")
CountryData <- left_join(x=data.frame(Id = WorldCountry$id), y=overall, by = c("Id" ="Country.Code"))
library(leaflet)    # The map-making package
library(geojsonio)  # A package for geographic and spatial data, requires the latest version of dplyr
library(dplyr)      # Used for data manipulation and merging
library(htmltools)
library(tidyr)
library(ggplot2)
library(readr)
library(plotly)   # for interactive visuals
library(stringr)  # to process character strings
library(forcats)
#Read all the data
shapeurl <- "https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json"
WorldCountry <- geojson_read(shapeurl, what = "sp")
co2<-read.csv("CO2.csv")
happiness<-read.csv("2015.csv")
education<-read.csv("educationExpen.csv")
gdp<-read.csv("GDP.csv")
homicides<-read.csv("homicides.csv")
lifeFemale<-read.csv("LifeExpenFemale.csv")
lifeMale<-read.csv("LifeExpectMale.csv")
head(lifeMale)
rd<-read.csv("R&D.csv")
#Clean education data
education[,3:59]<-list(NULL)
education[,4:6]<-list(NULL)
colnames(education)[3]<-parse_number(colnames(education)[3])
colnames(education)[3]<-"Education"
#Clean co2 data
co2[,3:58]<-list(NULL)
co2[,4:7]<-list(NULL)
colnames(co2)[3]<-parse_number(colnames(co2)[3])
colnames(co2)[3]<-"CO2"
#Clean gdp data
gdp[,3:59]<-list(NULL)
gdp[,4:6]<-list(NULL)
colnames(gdp)[3]<-parse_number(colnames(gdp)[3])
colnames(gdp)[3]<-"GDP"
#Clean homicides data
homicides[,3:59]<-list(NULL)
homicides[,4:6]<-list(NULL)
colnames(homicides)[3]<-parse_number(colnames(homicides)[3])
colnames(homicides)[3]<-"Homicides"
#Clean lifeFemale data
lifeFemale[,3:59]<-list(NULL)
lifeFemale[,4:6]<-list(NULL)
colnames(lifeFemale)[3]<-parse_number(colnames(lifeFemale)[3])
#Clean lifeMale data
lifeMale[,3:59]<-list(NULL)
lifeMale[,4:6]<-list(NULL)
colnames(lifeMale)[3]<-parse_number(colnames(lifeMale)[3])
#Clean r&d data
rd[,3:59]<-list(NULL)
rd[,4:6]<-list(NULL)
colnames(rd)[3]<-parse_number(colnames(rd)[3])
colnames(rd)[3]<-"RD"
#combin data for female and male life expectance
life<-full_join(x = lifeFemale, y = lifeMale, by = "Country.Code")
life[,1]<-list(NULL)
colnames(life)[2]<-"Female"
colnames(life)[3]<-"Country"
colnames(life)[4]<-"Male"
life<-filter(life, Female != "NA" | Male != "NA")
life$average = (life$Female+life$Male)/2
#Combine the rest of the data frame with the happiness data frame
overall<- full_join(x=life, y=rd, by="Country.Code")
colnames(overall)[3]="Country"
overall[,6]<-list(NULL)
overall<- full_join(x=overall, y=homicides, by="Country.Code")
colnames(overall)[3]="Country"
overall[,7]<-list(NULL)
overall<-full_join(x=overall, y=gdp, by="Country.Code")
overall[,8]<-list(NULL)
overall<-full_join(x=overall, y=education, by="Country.Code")
overall[,9]<-list(NULL)
overall<-full_join(x=overall, y=co2, by="Country.Code")
overall[,10]<-list(NULL)
colnames(overall)[3]<-"Country"
overall<-left_join(x = happiness, y = overall, by = "Country")
overall[,5:8]<-list(NULL)
overall[,7:8]<-list(NULL)
CountryData <- left_join(x=data.frame(Id = WorldCountry$id), y=overall, by = c("Id" ="Country.Code"))
save(CountryData, file = "CountryData.RData")
runApp('MidTermApp.r')
plot_ly(CountryData %>% filter(!is.na(Freedom)), x = ~Freedom, color = I("blue")) %>%
add_markers(y = ~Happiness.Score, text = ~Country, showlegend = FALSE) %>%
add_lines(y = ~fitted(lm(Happiness.Score ~ Freedom)),
line = list(color = '#07A4B5'),
name = "Lm Smoother", showlegend = TRUE) %>%
layout(xaxis = list(title = 'Freedom'),
yaxis = list(title = 'Happiness Score'),
legend = list(x = 10, y = 1))
plot_ly(CountryData %>% filter(!is.na(Freedom)), x = ~Freedom, color = I("blue")) %>%
add_markers(y = ~Happiness.Score, text = ~Country, showlegend = FALSE) %>%
add_lines(y = ~fitted(lm(Happiness.Score ~ Freedom)),
line = list(color = '#07A4B5'),
name = "Lm Smoother", showlegend = TRUE) %>%
layout(xaxis = list(title = 'Freedom'),
yaxis = list(title = 'Happiness Score'),
legend = list(x = 10, y = 1))
plot_ly(CountryData %>% filter(!is.na(Trust..Government.Corruption.)), x = ~Trust..Government.Corruption., color = I("blue")) %>%
add_markers(y = ~Happiness.Score, text = ~Country, showlegend = FALSE) %>%
add_lines(y = ~fitted(lm(Happiness.Score ~ Trust..Government.Corruption.)),
line = list(color = '#07A4B5'),
name = "Lm Smoother", showlegend = TRUE) %>%
layout(xaxis = list(title = 'Trust..Government.Corruption.'),
yaxis = list(title = 'Happiness Score'),
legend = list(x = 10, y = 1))
runApp('MidTermApp.r')
runApp('MidTermApp.r')
runApp('MidTermApp.r')
