lifeMale[,4:6]<-list(NULL)
colnames(lifeMale)[3]<-parse_number(colnames(lifeMale)[3])
#Clean r&d data
rd[,3:59]<-list(NULL)
rd[,4:6]<-list(NULL)
colnames(rd)[3]<-parse_number(colnames(rd)[3])
colnames(rd)[3]<-"RD"
#combin data for female and male life expectance
life<-full_join(x = lifeFemale, y = lifeMale, by = "Country.Code")
life[,1]<-list(NULL)
colnames(life)[2]<-"Female"
colnames(life)[3]<-"Country"
colnames(life)[4]<-"Male"
life<-filter(life, Female != "NA" | Male != "NA")
life$average = (life$Female+life$Male)/2
#Combine the rest of the data frame with the happiness data frame
overall<- full_join(x=life, y=rd, by="Country.Code")
colnames(overall)[3]="Country"
overall[,6]<-list(NULL)
overall<- full_join(x=overall, y=homicides, by="Country.Code")
colnames(overall)[3]="Country"
overall[,7]<-list(NULL)
overall<-full_join(x=overall, y=gdp, by="Country.Code")
overall[,8]<-list(NULL)
overall<-full_join(x=overall, y=education, by="Country.Code")
overall[,9]<-list(NULL)
overall<-full_join(x=overall, y=co2, by="Country.Code")
overall[,10]<-list(NULL)
colnames(overall)[3]<-"Country"
overall<-left_join(x = happiness, y = overall, by = "Country")
overall[,5:8]<-list(NULL)
overall[,7:8]<-list(NULL)
CountryData <- full_join(x=data.frame(Name = WorldCountry$name), y=overall, by = c("Name" ="Country"))
library(leaflet)    # The map-making package
library(geojsonio)  # A package for geographic and spatial data, requires the latest version of dplyr
library(dplyr)      # Used for data manipulation and merging
library(htmltools)
library(tidyr)
library(ggplot2)
library(readr)
library(plotly)   # for interactive visuals
library(stringr)  # to process character strings
library(forcats)
#Read all the data
shapeurl <- "https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json"
WorldCountry <- geojson_read(shapeurl, what = "sp")
co2<-read.csv("CO2.csv")
happiness<-read.csv("2015.csv")
education<-read.csv("educationExpen.csv")
gdp<-read.csv("GDP.csv")
homicides<-read.csv("homicides.csv")
lifeFemale<-read.csv("LifeExpenFemale.csv")
lifeMale<-read.csv("LifeExpectMale.csv")
head(lifeMale)
rd<-read.csv("R&D.csv")
#Clean education data
education[,3:59]<-list(NULL)
education[,4:6]<-list(NULL)
colnames(education)[3]<-parse_number(colnames(education)[3])
colnames(education)[3]<-"Education"
#Clean co2 data
co2[,3:58]<-list(NULL)
co2[,4:7]<-list(NULL)
colnames(co2)[3]<-parse_number(colnames(co2)[3])
colnames(co2)[3]<-"CO2"
#Clean gdp data
gdp[,3:59]<-list(NULL)
gdp[,4:6]<-list(NULL)
colnames(gdp)[3]<-parse_number(colnames(gdp)[3])
colnames(gdp)[3]<-"GDP"
#Clean homicides data
homicides[,3:59]<-list(NULL)
homicides[,4:6]<-list(NULL)
colnames(homicides)[3]<-parse_number(colnames(homicides)[3])
colnames(homicides)[3]<-"Homicides"
#Clean lifeFemale data
lifeFemale[,3:59]<-list(NULL)
lifeFemale[,4:6]<-list(NULL)
colnames(lifeFemale)[3]<-parse_number(colnames(lifeFemale)[3])
#Clean lifeMale data
lifeMale[,3:59]<-list(NULL)
lifeMale[,4:6]<-list(NULL)
colnames(lifeMale)[3]<-parse_number(colnames(lifeMale)[3])
#Clean r&d data
rd[,3:59]<-list(NULL)
rd[,4:6]<-list(NULL)
colnames(rd)[3]<-parse_number(colnames(rd)[3])
colnames(rd)[3]<-"RD"
#combin data for female and male life expectance
life<-full_join(x = lifeFemale, y = lifeMale, by = "Country.Code")
life[,1]<-list(NULL)
colnames(life)[2]<-"Female"
colnames(life)[3]<-"Country"
colnames(life)[4]<-"Male"
life<-filter(life, Female != "NA" | Male != "NA")
life$average = (life$Female+life$Male)/2
#Combine the rest of the data frame with the happiness data frame
overall<- full_join(x=life, y=rd, by="Country.Code")
colnames(overall)[3]="Country"
overall[,6]<-list(NULL)
overall<- full_join(x=overall, y=homicides, by="Country.Code")
colnames(overall)[3]="Country"
overall[,7]<-list(NULL)
overall<-full_join(x=overall, y=gdp, by="Country.Code")
overall[,8]<-list(NULL)
overall<-full_join(x=overall, y=education, by="Country.Code")
overall[,9]<-list(NULL)
overall<-full_join(x=overall, y=co2, by="Country.Code")
overall[,10]<-list(NULL)
colnames(overall)[3]<-"Country"
overall<-left_join(x = happiness, y = overall, by = "Country")
overall[,5:8]<-list(NULL)
overall[,7:8]<-list(NULL)
CountryData <- left_join(x=data.frame(Name = WorldCountry$name), y=overall, by = c("Name" ="Country"))
head(CountryData)
CountryData<-filter(CountryData, Happiness.Rank != "NA")
head(CountryData)
pal <- colorBin("magma", domain = CountryData$Hapiness.Score)
myLabels <- paste("<strong>", CountryData$Name, "</strong>", "<br/>",
"Life Expectancy:", CountryData$Happiness.Score)
myPopups <- paste("Happy Planet Rank", CountryData$Happiness.Rank)
Map <- leaflet(WorldCountry$name) %>% addTiles() %>%
addPolygons(
fillColor = pal(CountryData$Happiness.Score),
weight = 2,
opacity = 1,
color = "white",
fillOpacity = 0.7,
highlight = highlightOptions(weight = 3,
color = "grey",
fillOpacity = 0.7,
bringToFront = TRUE),
label = lapply(myLabels, HTML),
popup = myPopups) %>%
addLegend(pal = pal, values = CountryData$Happiness.Score,
title = "Life Expectancy", position = "bottomright")
eaflet(WorldCountry$name) %>% addTiles() %>%
addPolygons(
fillColor = pal(CountryData$Happiness.Score),
weight = 2,
opacity = 1,
color = "white",
fillOpacity = 0.7,
highlight = highlightOptions(weight = 3,
color = "grey",
fillOpacity = 0.7,
bringToFront = TRUE),
label = lapply(myLabels, HTML),
popup = myPopups) %>%
addLegend(pal = pal, values = CountryData$Happiness.Score,
title = "Life Expectancy", position = "bottomright")
leaflet(WorldCountry$name) %>% addTiles() %>%
addPolygons(
fillColor = pal(CountryData$Happiness.Score),
weight = 2,
opacity = 1,
color = "white",
fillOpacity = 0.7,
highlight = highlightOptions(weight = 3,
color = "grey",
fillOpacity = 0.7,
bringToFront = TRUE),
label = lapply(myLabels, HTML),
popup = myPopups) %>%
addLegend(pal = pal, values = CountryData$Happiness.Score,
title = "Life Expectancy", position = "bottomright")
happiness <- read.csv('https://remiller1450.github.io/data/HappyPlanet.csv', stringsAsFactors = FALSE)
happiness22 <- read.csv('https://remiller1450.github.io/data/HappyPlanet.csv', stringsAsFactors = FALSE)
View(happiness22)
View(happiness22)
CountryHappy <- left_join(data.frame(Name = WorldCountry$name), happiness, by = c("Name" ="Country"))
Map <- leaflet(WorldCountry) %>% addTiles() %>%
addPolygons(
fillColor = pal(CountryHappy$LifeExpectancy),
weight = 2,
opacity = 1,
color = "white",
fillOpacity = 0.7)
Map
CountryHappy <- left_join(data.frame(Name = WorldCountry$name), happiness, by = c("Name" ="Country"))
myLabels <- paste("<strong>", CountryHappy$Name, "</strong>", "<br/>",
"Life Expectancy:", CountryHappy$LifeExpectancy)
myPopups <- paste("Happy Planet Rank", CountryHappy$HPIRank)
Map <- leaflet(WorldCountry) %>% addTiles() %>%
addPolygons(
fillColor = pal(CountryHappy$LifeExpectancy),
weight = 2,
opacity = 1,
color = "white",
fillOpacity = 0.7,
highlight = highlightOptions(weight = 3,
color = "grey",
fillOpacity = 0.7,
bringToFront = TRUE),
label = lapply(myLabels, HTML),
popup = myPopups) %>%
addLegend(pal = pal, values = CountryHappy$LifeExpectancy,
title = "Life Expectancy", position = "bottomright")
Map
library(leaflet)    # The map-making package
library(geojsonio)  # A package for geographic and spatial data, requires the latest version of dplyr
library(dplyr)      # Used for data manipulation and merging
library(htmltools)
library(tidyr)
library(ggplot2)
library(readr)
library(plotly)   # for interactive visuals
library(stringr)  # to process character strings
library(forcats)
#Read all the data
shapeurl <- "https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json"
WorldCountry <- geojson_read(shapeurl, what = "sp")
co2<-read.csv("CO2.csv")
happiness<-read.csv("2015.csv")
education<-read.csv("educationExpen.csv")
gdp<-read.csv("GDP.csv")
homicides<-read.csv("homicides.csv")
lifeFemale<-read.csv("LifeExpenFemale.csv")
lifeMale<-read.csv("LifeExpectMale.csv")
head(lifeMale)
rd<-read.csv("R&D.csv")
#Clean education data
education[,3:59]<-list(NULL)
education[,4:6]<-list(NULL)
colnames(education)[3]<-parse_number(colnames(education)[3])
colnames(education)[3]<-"Education"
#Clean co2 data
co2[,3:58]<-list(NULL)
co2[,4:7]<-list(NULL)
colnames(co2)[3]<-parse_number(colnames(co2)[3])
colnames(co2)[3]<-"CO2"
#Clean gdp data
gdp[,3:59]<-list(NULL)
gdp[,4:6]<-list(NULL)
colnames(gdp)[3]<-parse_number(colnames(gdp)[3])
colnames(gdp)[3]<-"GDP"
#Clean homicides data
homicides[,3:59]<-list(NULL)
homicides[,4:6]<-list(NULL)
colnames(homicides)[3]<-parse_number(colnames(homicides)[3])
colnames(homicides)[3]<-"Homicides"
#Clean lifeFemale data
lifeFemale[,3:59]<-list(NULL)
lifeFemale[,4:6]<-list(NULL)
colnames(lifeFemale)[3]<-parse_number(colnames(lifeFemale)[3])
#Clean lifeMale data
lifeMale[,3:59]<-list(NULL)
lifeMale[,4:6]<-list(NULL)
colnames(lifeMale)[3]<-parse_number(colnames(lifeMale)[3])
#Clean r&d data
rd[,3:59]<-list(NULL)
rd[,4:6]<-list(NULL)
colnames(rd)[3]<-parse_number(colnames(rd)[3])
colnames(rd)[3]<-"RD"
#combin data for female and male life expectance
life<-full_join(x = lifeFemale, y = lifeMale, by = "Country.Code")
life[,1]<-list(NULL)
colnames(life)[2]<-"Female"
colnames(life)[3]<-"Country"
colnames(life)[4]<-"Male"
life<-filter(life, Female != "NA" | Male != "NA")
life$average = (life$Female+life$Male)/2
#Combine the rest of the data frame with the happiness data frame
overall<- full_join(x=life, y=rd, by="Country.Code")
colnames(overall)[3]="Country"
overall[,6]<-list(NULL)
overall<- full_join(x=overall, y=homicides, by="Country.Code")
colnames(overall)[3]="Country"
overall[,7]<-list(NULL)
overall<-full_join(x=overall, y=gdp, by="Country.Code")
overall[,8]<-list(NULL)
overall<-full_join(x=overall, y=education, by="Country.Code")
overall[,9]<-list(NULL)
overall<-full_join(x=overall, y=co2, by="Country.Code")
overall[,10]<-list(NULL)
colnames(overall)[3]<-"Country"
overall<-left_join(x = happiness, y = overall, by = "Country")
overall[,5:8]<-list(NULL)
overall[,7:8]<-list(NULL)
CountryData <- left_join(x=data.frame(Name = WorldCountry$name), y=overall, by = c("Name" ="Country"))
pal <- colorBin("magma", domain = CountryData$Hapiness.Score)
myLabels <- paste("<strong>", CountryData$Name, "</strong>", "<br/>",
"Life Expectancy:", CountryData$Happiness.Score)
myPopups <- paste("Happy Planet Rank", CountryData$Happiness.Rank)
Map <- leaflet(WorldCountry$name) %>% addTiles() %>%
addPolygons(
fillColor = pal(CountryData$Happiness.Score),
weight = 2,
opacity = 1,
color = "white",
fillOpacity = 0.7,
highlight = highlightOptions(weight = 3,
color = "grey",
fillOpacity = 0.7,
bringToFront = TRUE),
label = lapply(myLabels, HTML),
popup = myPopups) %>%
addLegend(pal = pal, values = CountryData$Happiness.Score,
title = "Life Expectancy", position = "bottomright")
pal <- colorBin("magma", domain = CountryData$Hapiness.Score)
myLabels <- paste("<strong>", CountryData$Name, "</strong>", "<br/>",
"Life Expectancy:", CountryData$Happiness.Score)
myPopups <- paste("Happy Planet Rank", CountryData$Happiness.Rank)
Map <- leaflet(WorldCountry) %>% addTiles() %>%
addPolygons(
fillColor = pal(CountryData$Happiness.Score),
weight = 2,
opacity = 1,
color = "white",
fillOpacity = 0.7,
highlight = highlightOptions(weight = 3,
color = "grey",
fillOpacity = 0.7,
bringToFront = TRUE),
label = lapply(myLabels, HTML),
popup = myPopups) %>%
addLegend(pal = pal, values = CountryData$Happiness.Score,
title = "Life Expectancy", position = "bottomright")
("magma", domain = CountryData$Hapiness.Score)
pal <- colorBin("magma", domain = CountryData$Hapiness.Score)
myLabels <- paste("<strong>", CountryData$Name, "</strong>", "<br/>",
"Life Expectancy:", CountryData$Happiness.Score)
myPopups <- paste("Happy Planet Rank", CountryData$Happiness.Rank)
Map <- leaflet(WorldCountry) %>% addTiles() %>%
addPolygons(
fillColor = pal(CountryData$Happiness.Score),
weight = 2,
opacity = 1,
color = "white",
fillOpacity = 0.7,
highlight = highlightOptions(weight = 3,
color = "grey",
fillOpacity = 0.7,
bringToFront = TRUE),
label = lapply(myLabels, HTML),
popup = myPopups) %>%
addLegend(pal = pal, values = CountryData$Happiness.Score,
title = "Life Expectancy", position = "bottomright")
pal <- colorBin("magma", domain = CountryData$Happiness.Score)
myLabels <- paste("<strong>", CountryData$Name, "</strong>", "<br/>",
"Life Expectancy:", CountryData$Happiness.Score)
myPopups <- paste("Happy Planet Rank", CountryData$Happiness.Rank)
Map <- leaflet(WorldCountry) %>% addTiles() %>%
addPolygons(
fillColor = pal(CountryData$Happiness.Score),
weight = 2,
opacity = 1,
color = "white",
fillOpacity = 0.7,
highlight = highlightOptions(weight = 3,
color = "grey",
fillOpacity = 0.7,
bringToFront = TRUE),
label = lapply(myLabels, HTML),
popup = myPopups) %>%
addLegend(pal = pal, values = CountryData$Happiness.Score,
title = "Life Expectancy", position = "bottomright")
Map
View(CountryData)
View(CountryData)
View(overall)
View(overall)
View(WorldCountry)
View(WorldCountry)
CountryData <- left_join(x=data.frame(Id = WorldCountry$id), y=overall, by = c("Id" ="Country.Code"))
pal <- colorBin("magma", domain = CountryData$Happiness.Score)
myLabels <- paste("<strong>", CountryData$Name, "</strong>", "<br/>",
"Life Expectancy:", CountryData$Happiness.Score)
myPopups <- paste("Happy Planet Rank", CountryData$Happiness.Rank)
Map <- leaflet(WorldCountry) %>% addTiles() %>%
addPolygons(
fillColor = pal(CountryData$Happiness.Score),
weight = 2,
opacity = 1,
color = "white",
fillOpacity = 0.7,
highlight = highlightOptions(weight = 3,
color = "grey",
fillOpacity = 0.7,
bringToFront = TRUE),
label = lapply(myLabels, HTML),
popup = myPopups) %>%
addLegend(pal = pal, values = CountryData$Happiness.Score,
title = "Life Expectancy", position = "bottomright")
Map
head(CountryData)
leaflet(WorldCountry) %>% addTiles() %>%
addPolygons(
fillColor = pal(CountryData$Happiness.Score),
weight = 2,
opacity = 1,
color = "white",
fillOpacity = 0.7,
highlight = highlightOptions(weight = 3,
color = "grey",
fillOpacity = 0.7,
bringToFront = TRUE),
label = lapply(myLabels, HTML),
popup = myPopups) %>%
addLegend(pal = pal, values = CountryData$Happiness.Score,
title = "Life Expectancy", position = "bottomright")
pal <- colorBin("magma", domain = CountryData$Happiness.Score)
myLabels <- paste("<strong>", CountryData$Country, "</strong>", "<br/>",
"Life Expectancy:", CountryData$Happiness.Score)
myPopups <- paste("Happy Planet Rank", CountryData$Happiness.Rank)
leaflet(WorldCountry) %>% addTiles() %>%
addPolygons(
fillColor = pal(CountryData$Happiness.Score),
weight = 2,
opacity = 1,
color = "white",
fillOpacity = 0.7,
highlight = highlightOptions(weight = 3,
color = "grey",
fillOpacity = 0.7,
bringToFront = TRUE),
label = lapply(myLabels, HTML),
popup = myPopups) %>%
addLegend(pal = pal, values = CountryData$Happiness.Score,
title = "Life Expectancy", position = "bottomright")
pal <- colorNumeric(
palette = "Blues",
domain = countries$CountryData$Happiness.Score)
myLabels <- paste("<strong>", CountryData$Country, "</strong>", "<br/>",
"Life Expectancy:", CountryData$Happiness.Score)
myPopups <- paste("Happy Planet Rank", CountryData$Happiness.Rank)
Map <- leaflet(WorldCountry) %>% addTiles() %>%
addPolygons(
fillColor = pal(CountryData$Happiness.Score),
weight = 2,
opacity = 1,
color = "white",
fillOpacity = 0.7,
highlight = highlightOptions(weight = 3,
color = "grey",
fillOpacity = 0.7,
bringToFront = TRUE),
label = lapply(myLabels, HTML),
popup = myPopups) %>%
addLegend(pal = pal, values = CountryData$Happiness.Score,
title = "Life Expectancy", position = "bottomright")
Map
pal <- colorNumeric(
palette = "Blues",
domain = countries$CountryData$Happiness.Score)
pal <- colorNumeric(
palette = "Blues",
domain = CountryData$Happiness.Score)
myLabels <- paste("<strong>", CountryData$Country, "</strong>", "<br/>",
"Life Expectancy:", CountryData$Happiness.Score)
myPopups <- paste("Happy Planet Rank", CountryData$Happiness.Rank)
Map <- leaflet(WorldCountry) %>% addTiles() %>%
addPolygons(
fillColor = pal(CountryData$Happiness.Score),
weight = 2,
opacity = 1,
color = "white",
fillOpacity = 0.7,
highlight = highlightOptions(weight = 3,
color = "grey",
fillOpacity = 0.7,
bringToFront = TRUE),
label = lapply(myLabels, HTML),
popup = myPopups) %>%
addLegend(pal = pal, values = CountryData$Happiness.Score,
title = "Life Expectancy", position = "bottomright")
Map
library(sp)
library(rgeos)
library(rworldmap)
box <- readWKT("POLYGON((-180 90, 180 90, 180 -90, -180 -90, -180 90))")
proj4string(box) <- CRS("+proj=cea +datum=WGS84")
set.seed(1)
pts <- spsample(box, n=2000, type="random")
pols <- gBuffer(pts, byid=TRUE, width=50) # create circle polys around each point
merge = sample(1:40, 100, replace = T) # create vector of rand #s between 0-100 to merge pols on
Sp.df <- gUnionCascaded(pols, id = merge) # combine polygons with the same 'merge' value
# create SPDF using polygons and randomly assigning 1 or 2 to each in the @data df
Sp.df <- SpatialPolygonsDataFrame(Sp.df, data.frame(z = factor(sample(1:2, length(Sp.df), replace = TRUE)),
row.names= unique(merge)))
Sp.df <- crop(Sp.df, box)
colors <- c(rgb(r=0, g=0, blue=220, alpha=50, max=255), rgb(r=220, g=0, b=0, alpha=50, max=255))
land <- getMap()
overlay.map <- spplot(Sp.df, zcol = "z", col.regions = colors, col = NA, alpha = 0.5, breaks=c(0,1)) +
layer(sp.polygons(land, fill = "transparent",  col = "grey50"))
install.packages("sp")
install.packages("sp")
install.packages("sp")
install.packages("rgeos")
install.packages("rworldmap")
library(sp)
library(rgeos)
library(rworldmap)
box <- readWKT("POLYGON((-180 90, 180 90, 180 -90, -180 -90, -180 90))")
proj4string(box) <- CRS("+proj=cea +datum=WGS84")
set.seed(1)
pts <- spsample(box, n=2000, type="random")
pols <- gBuffer(pts, byid=TRUE, width=50) # create circle polys around each point
merge = sample(1:40, 100, replace = T) # create vector of rand #s between 0-100 to merge pols on
Sp.df <- gUnionCascaded(pols, id = merge) # combine polygons with the same 'merge' value
# create SPDF using polygons and randomly assigning 1 or 2 to each in the @data df
Sp.df <- SpatialPolygonsDataFrame(Sp.df, data.frame(z = factor(sample(1:2, length(Sp.df), replace = TRUE)),
row.names= unique(merge)))
Sp.df <- crop(Sp.df, box)
colors <- c(rgb(r=0, g=0, blue=220, alpha=50, max=255), rgb(r=220, g=0, b=0, alpha=50, max=255))
land <- getMap()
overlay.map <- spplot(Sp.df, zcol = "z", col.regions = colors, col = NA, alpha = 0.5, breaks=c(0,1)) +
layer(sp.polygons(land, fill = "transparent",  col = "grey50"))
install.packages("sp")
install.packages("sp")
install.packages("sp")
install.packages("sp")
